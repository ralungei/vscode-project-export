Project Code Export
Date: Sat Nov 30 01:46:35 CET 2024

=========================================
File: CHANGELOG.md
=========================================

# Change Log

All notable changes to the "project-export" extension will be documented in this file.

Check [Keep a Changelog](http://keepachangelog.com/) for recommendations on how to structure this file.

## [Unreleased]

- Initial release

=========================================
File: README.md
=========================================

# AI Project Export Pro

Professional-grade tool to export your project's code in an optimized format for AI models.

## Features

‚ú® **One-Click Export**: Export your entire project with a single click
üéØ **AI-Optimized**: Format specifically designed for AI code analysis
üöÄ **Smart Filtering**: Automatically excludes unnecessary files
üìã **Clipboard Ready**: Results copied directly to your clipboard
‚ö° **Lightweight**: Zero impact on your project's structure

## Usage

1. Click the "Export to Clipboard" button in the status bar
2. Paste the exported code into ChatGPT, Claude, or your preferred AI tool
3. Get instant, context-aware responses about your codebase

## Supported Files

Automatically includes relevant source files while excluding:

- Build artifacts
- Dependencies
- Cache directories
- Configuration files
- And more...

## Requirements

- Visual Studio Code version 1.95.0 or higher
- A clipboard-enabled system

## Support

Found a bug or have a feature request? Visit our [GitHub repository](https://github.com/ralungei/vscode-project-export).

## License

MIT License - feel free to use in any project!


=========================================
File: src/extension.ts
=========================================

import * as vscode from "vscode";
import { ProjectExporter } from "./projectExporter";

export function activate(context: vscode.ExtensionContext) {
  console.log('Extension "project-export" is now active!');

  const exportCommand = vscode.commands.registerCommand(
    "project-export.exportProject",
    async () => {
      const workspacePath = vscode.workspace.workspaceFolders?.[0].uri.fsPath;

      if (!workspacePath) {
        vscode.window.showErrorMessage("No workspace folder found");
        return;
      }

      try {
        const exporter = new ProjectExporter(workspacePath);
        await exporter.exportProject();
      } catch (error) {
        vscode.window.showErrorMessage(`Error exporting project: ${error}`);
      }
    }
  );

  // Crear el bot√≥n en la barra de estado
  const statusBarItem = vscode.window.createStatusBarItem(
    vscode.StatusBarAlignment.Right,
    1000 // Alta prioridad para que aparezca m√°s a la derecha
  );

  // Personalizar el aspecto del bot√≥n
  statusBarItem.text = "$(file-text) Export"; // Icono m√°s espec√≠fico
  statusBarItem.color = new vscode.ThemeColor("statusBar.foreground");

  // Agregar un tooltip m√°s descriptivo
  statusBarItem.tooltip =
    "Export project files to clipboard (filtered by configuration)";

  // Agregar un nombre para accesibilidad
  statusBarItem.name = "Project Export";

  // Asignar el comando
  statusBarItem.command = {
    title: "Export Project",
    command: "project-export.exportProject",
    tooltip: "Export all project files to clipboard",
  };

  statusBarItem.show();

  context.subscriptions.push(exportCommand, statusBarItem);
}

export function deactivate() {}


=========================================
File: src/projectExporter.ts
=========================================

import * as fs from "fs";
import * as os from "os";
import * as path from "path";
import * as vscode from "vscode";

export interface ExportConfig {
  includeExtensions: string[];
  excludeExtensions: string[];
  excludeFiles: string[];
  excludeDirectories: string[];
}

export const DEFAULT_CONFIG: ExportConfig = {
  includeExtensions: ["js", "jsx", "ts", "tsx", "html", "md", "py", "pyi"],
  excludeExtensions: ["css", "scss", "json", "yaml", "yml", "lock", "env"],
  excludeFiles: ["package-lock.json", "poetry.lock"],
  excludeDirectories: [
    "node_modules",
    ".git",
    "__pycache__",
    ".venv",
    ".poetry",
    "venv",
    "build",
    "dist",
    ".next",
    ".cache",
    "coverage",
    ".pytest_cache",
    ".mypy_cache",
    ".yarn",
  ],
};

export class ProjectExporter {
  private readonly workspacePath: string;
  private readonly config: ExportConfig;
  private readonly tempFilePath: string;

  constructor(workspacePath: string, config: ExportConfig = DEFAULT_CONFIG) {
    this.workspacePath = workspacePath;
    this.config = config;
    // Crear el archivo temporal en el directorio temporal del sistema
    this.tempFilePath = path.join(os.tmpdir(), ".project_export.tmp");
  }

  async exportProject(): Promise<void> {
    try {
      const output = await this.generateExport();

      // Guardar en archivo temporal
      await fs.promises.writeFile(this.tempFilePath, output, "utf8");

      // Copiar al portapapeles
      await vscode.env.clipboard.writeText(output);

      vscode.window.showInformationMessage(
        `Project exported to clipboard! Temp file: ${this.tempFilePath}`
      );
    } catch (error) {
      throw new Error(`Export failed: ${error}`);
    }
  }

  private async generateExport(): Promise<string> {
    let output = "Project Code Export\n";
    output += `Date: ${new Date().toString()}\n\n`;
    output += await this.traverseDirectory(this.workspacePath);
    return output;
  }

  private async traverseDirectory(dirPath: string): Promise<string> {
    let content = "";
    const items = await fs.promises.readdir(dirPath);

    for (const item of items) {
      const fullPath = path.join(dirPath, item);
      const stat = await fs.promises.stat(fullPath);

      if (stat.isDirectory()) {
        if (
          !this.config.excludeDirectories.some((dir) => fullPath.includes(dir))
        ) {
          content += await this.traverseDirectory(fullPath);
        }
      } else if (stat.isFile()) {
        if (this.shouldIncludeFile(item)) {
          content += await this.formatFileContent(fullPath);
        }
      }
    }

    return content;
  }

  private shouldIncludeFile(filename: string): boolean {
    const extension = path.extname(filename).slice(1).toLowerCase();

    if (this.config.excludeFiles.includes(filename)) {
      return false;
    }

    if (this.config.excludeExtensions.includes(extension)) {
      return false;
    }

    return this.config.includeExtensions.includes(extension);
  }

  private async formatFileContent(filePath: string): Promise<string> {
    const relativePath = path.relative(this.workspacePath, filePath);
    let content = "\n=========================================\n";
    content += `File: ${relativePath}\n`;
    content += "=========================================\n\n";

    const fileContent = await fs.promises.readFile(filePath, "utf8");
    content += fileContent + "\n\n";

    return content;
  }
}


=========================================
File: src/test/extension.test.ts
=========================================

import * as assert from 'assert';

// You can import and use all API from the 'vscode' module
// as well as import your extension to test it
import * as vscode from 'vscode';
// import * as myExtension from '../../extension';

suite('Extension Test Suite', () => {
	vscode.window.showInformationMessage('Start all tests.');

	test('Sample test', () => {
		assert.strictEqual(-1, [1, 2, 3].indexOf(5));
		assert.strictEqual(-1, [1, 2, 3].indexOf(0));
	});
});


=========================================
File: vsc-extension-quickstart.md
=========================================

# Welcome to your VS Code Extension

## What's in the folder

* This folder contains all of the files necessary for your extension.
* `package.json` - this is the manifest file in which you declare your extension and command.
  * The sample plugin registers a command and defines its title and command name. With this information VS Code can show the command in the command palette. It doesn‚Äôt yet need to load the plugin.
* `src/extension.ts` - this is the main file where you will provide the implementation of your command.
  * The file exports one function, `activate`, which is called the very first time your extension is activated (in this case by executing the command). Inside the `activate` function we call `registerCommand`.
  * We pass the function containing the implementation of the command as the second parameter to `registerCommand`.

## Setup

* install the recommended extensions (amodio.tsl-problem-matcher, ms-vscode.extension-test-runner, and dbaeumer.vscode-eslint)


## Get up and running straight away

* Press `F5` to open a new window with your extension loaded.
* Run your command from the command palette by pressing (`Ctrl+Shift+P` or `Cmd+Shift+P` on Mac) and typing `Hello World`.
* Set breakpoints in your code inside `src/extension.ts` to debug your extension.
* Find output from your extension in the debug console.

## Make changes

* You can relaunch the extension from the debug toolbar after changing code in `src/extension.ts`.
* You can also reload (`Ctrl+R` or `Cmd+R` on Mac) the VS Code window with your extension to load your changes.


## Explore the API

* You can open the full set of our API when you open the file `node_modules/@types/vscode/index.d.ts`.

## Run tests

* Install the [Extension Test Runner](https://marketplace.visualstudio.com/items?itemName=ms-vscode.extension-test-runner)
* Run the "watch" task via the **Tasks: Run Task** command. Make sure this is running, or tests might not be discovered.
* Open the Testing view from the activity bar and click the Run Test" button, or use the hotkey `Ctrl/Cmd + ; A`
* See the output of the test result in the Test Results view.
* Make changes to `src/test/extension.test.ts` or create new test files inside the `test` folder.
  * The provided test runner will only consider files matching the name pattern `**.test.ts`.
  * You can create folders inside the `test` folder to structure your tests any way you want.

## Go further

* Reduce the extension size and improve the startup time by [bundling your extension](https://code.visualstudio.com/api/working-with-extensions/bundling-extension).
* [Publish your extension](https://code.visualstudio.com/api/working-with-extensions/publishing-extension) on the VS Code extension marketplace.
* Automate builds by setting up [Continuous Integration](https://code.visualstudio.com/api/working-with-extensions/continuous-integration).


=========================================
File: webpack.config.js
=========================================

//@ts-check

'use strict';

const path = require('path');

//@ts-check
/** @typedef {import('webpack').Configuration} WebpackConfig **/

/** @type WebpackConfig */
const extensionConfig = {
  target: 'node', // VS Code extensions run in a Node.js-context üìñ -> https://webpack.js.org/configuration/node/
	mode: 'none', // this leaves the source code as close as possible to the original (when packaging we set this to 'production')

  entry: './src/extension.ts', // the entry point of this extension, üìñ -> https://webpack.js.org/configuration/entry-context/
  output: {
    // the bundle is stored in the 'dist' folder (check package.json), üìñ -> https://webpack.js.org/configuration/output/
    path: path.resolve(__dirname, 'dist'),
    filename: 'extension.js',
    libraryTarget: 'commonjs2'
  },
  externals: {
    vscode: 'commonjs vscode' // the vscode-module is created on-the-fly and must be excluded. Add other modules that cannot be webpack'ed, üìñ -> https://webpack.js.org/configuration/externals/
    // modules added here also need to be added in the .vscodeignore file
  },
  resolve: {
    // support reading TypeScript and JavaScript files, üìñ -> https://github.com/TypeStrong/ts-loader
    extensions: ['.ts', '.js']
  },
  module: {
    rules: [
      {
        test: /\.ts$/,
        exclude: /node_modules/,
        use: [
          {
            loader: 'ts-loader'
          }
        ]
      }
    ]
  },
  devtool: 'nosources-source-map',
  infrastructureLogging: {
    level: "log", // enables logging required for problem matchers
  },
};
module.exports = [ extensionConfig ];

